INIZIALIZZO LO SWARM
SULLA MACCHINA NODE_1

docker swarm init --listen-addr 192.168.56.10:2377 --advertise-addr 192.168.56.10:2377


//OUTPUT DEL COMANDO SOPRA
Swarm initialized: current node (7p1yr8kqpzkh7gn0d4xjf7ml9) is now a manager.
To add a worker to this swarm, run the following command:
    docker swarm join --token SWMTKN-1-6159koiqfu7i8q7ey6qnrhsfy69723wzuhetyvsn0lz7c5l2bu-332uuae3ttluutcfbfmpswp5m 192.168.56.10:2375
To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

AGGIUNGO LA MACCHINA 2 AL CLUSTER (1 MANAGER E 1 WORKER)

docker swarm join \
> --token SWMTKN-1-6159koiqfu7i8q7ey6qnrhsfy69723wzuhetyvsn0lz7c5l2bu-332uuae3ttluutcfbfmpswp5m \
> 192.168.56.10:2377


vagrant@node1:~$ docker node ls
ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
7p1yr8kqpzkh7gn0d4xjf7ml9 *   node1      Ready     Active         Leader           24.0.6
5z773pysy4n89up9w1slnk2zb     node2      Ready     Active                          24.0.6

docker info

NODE LEFT THE SWARM
docker swarm leave

docker context list



INSTALLAZIONE PORTAINER
move portainer-agent-stack.yml into 00.. folder

docker stack deploy --compose-file=portainer-agent-stack.yml portainer

docker service create -p 80:80 --name webserver nginx
docker service ls

http://192.168.56.10:9000


//CREAZIONE CONTESTO

docker service create \
> --name my-web \
> publish published=8086, target=80 \
> mode global \
> nginx



GESTIONE MANAGER-WORKER
node1=manager
node2=worker

docker node update --availability drain node-1 //node1=drain, node2=reachable

PROMOTE/DEMOTE A NODE:
docker node promote node2 //promote node2 to a manager node

docker node demote node1 //node1 is no more a manager node

ORA SE E' TUTTO CONFIGURATO BENE IL SERVIZIO E' SU MA SULLA SECONDA MACCHINA

utilizziamo docker node ls sul node1 (restituisce errore), mentre sul node2 restituisce l'elenco delle istanze docker in utilizzo
